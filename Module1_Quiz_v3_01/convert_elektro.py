import re
import json
import os

def parse_txt_questions(file_path, category_name):
    """Parsuje TXT soubor s ot√°zkami a p≈ôevede je do JSON form√°tu"""
    
    with open(file_path, 'r', encoding='utf-8') as f:
        content = f.read()
    
    questions = []
    
    # Rozdƒõlen√≠ obsahu na jednotliv√© ot√°zky podle ƒç√≠slov√°n√≠
    question_blocks = re.split(r'\n(?=\d+\))', content.strip())
    
    for i, block in enumerate(question_blocks):
        if not block.strip():
            continue
            
        lines = [line.strip() for line in block.strip().split('\n') if line.strip()]
        
        if len(lines) < 6:
            print(f"Varov√°n√≠: Ne√∫pln√° ot√°zka {i+1} v souboru {file_path}")
            continue
        
        # Prvn√≠ ≈ô√°dek obsahuje ƒç√≠slo a ot√°zku
        question_line = lines[0]
        # Odstranƒõn√≠ ƒç√≠slov√°n√≠ z ot√°zky
        question_text = re.sub(r'^\d+\)\s*', '', question_line)
        
        # N√°sleduj√≠c√≠ 3 ≈ô√°dky jsou odpovƒõdi
        answers = lines[1:4]
        
        # 4. ≈ô√°dek je spr√°vn√° odpovƒõƒè
        correct_answer_text = lines[4]
        
        # Zb√Ωvaj√≠c√≠ ≈ô√°dky jsou vysvƒõtlen√≠ (m≈Ø≈æe b√Ωt v√≠ce ≈ô√°dk≈Ø)
        explanation_lines = lines[5:]
        explanation = ' '.join(explanation_lines) if explanation_lines else ''
        
        # Najdeme index spr√°vn√© odpovƒõdi
        correct_index = -1
        for j, answer in enumerate(answers):
            if answer.strip() == correct_answer_text.strip():
                correct_index = j
                break
        
        if correct_index == -1:
            print(f"Varov√°n√≠: Nepoda≈ôilo se naj√≠t spr√°vnou odpovƒõƒè pro ot√°zku {i+1}: '{correct_answer_text}'")
            print(f"Dostupn√© odpovƒõdi: {answers}")
            # Pokus√≠me se naj√≠t nejpodobnƒõj≈°√≠ odpovƒõƒè
            for j, answer in enumerate(answers):
                if correct_answer_text.lower().strip() in answer.lower().strip():
                    correct_index = j
                    break
            if correct_index == -1:
                correct_index = 0  # Fallback na prvn√≠ odpovƒõƒè
        
        question_obj = {
            "id": i + 1,
            "question": question_text,
            "answers": answers,
            "correct": correct_index,
            "explanation": explanation,
            "category": category_name
        }
        
        questions.append(question_obj)
    
    return questions

def convert_elektro_questions():
    """Hlavn√≠ funkce pro p≈ôevod v≈°ech elektrotechnick√Ωch ot√°zek"""
    
    elektro_dir = "otazky_elektro"
    
    if not os.path.exists(elektro_dir):
        print(f"Slo≈æka {elektro_dir} neexistuje!")
        return
    
    # Mapov√°n√≠ n√°zv≈Ø soubor≈Ø na kategorie
    file_mapping = {
        "Questions - V≈°eobecn√©.txt": "Elektro_Vseobecne",
        "Questions - OB.txt": "Elektro_OB",
        "Questions - ochrana p≈ôed bleskem (LPS).txt": "Elektro_Ochrana_Blesk",
        "Questions - Ochrana p≈ôed nebezpeƒçn√Ωm dotykov√Ωm napƒõt√≠m.txt": "Elektro_Ochrana_Dotyk"
    }
    
    all_elektro_questions = []
    elektro_categories = []
    
    print("=== P≈òEVOD ELEKTROTECHNICK√ùCH OT√ÅZEK ===")
    
    for filename, category_name in file_mapping.items():
        file_path = os.path.join(elektro_dir, filename)
        
        if not os.path.exists(file_path):
            print(f"Soubor {filename} nenalezen!")
            continue
        
        print(f"\nZpracov√°v√°m: {filename}")
        print(f"Kategorie: {category_name}")
        
        try:
            questions = parse_txt_questions(file_path, category_name)
            
            # Ulo≈æen√≠ do samostatn√©ho JSON souboru
            output_filename = f"questions_{category_name}.json"
            with open(output_filename, 'w', encoding='utf-8') as f:
                json.dump(questions, f, ensure_ascii=False, indent=2)
            
            print(f"  ‚Üí P≈ôevedeno {len(questions)} ot√°zek")
            print(f"  ‚Üí Ulo≈æeno do {output_filename}")
            
            # P≈ôid√°n√≠ do celkov√©ho seznamu
            all_elektro_questions.extend(questions)
            
            # P≈ôid√°n√≠ kategorie
            elektro_categories.append({
                "id": category_name,
                "name": category_name.replace("_", " "),
                "count": len(questions),
                "filename": output_filename
            })
            
        except Exception as e:
            print(f"Chyba p≈ôi zpracov√°n√≠ {filename}: {e}")
    
    # Ulo≈æen√≠ v≈°ech elektro ot√°zek do jednoho souboru
    if all_elektro_questions:
        with open("questions_elektro_all.json", 'w', encoding='utf-8') as f:
            json.dump(all_elektro_questions, f, ensure_ascii=False, indent=2)
        
        print(f"\n‚úÖ Celkem p≈ôevedeno {len(all_elektro_questions)} elektrotechnick√Ωch ot√°zek")
        print(f"‚úÖ Ulo≈æeno do questions_elektro_all.json")
        
        # Aktualizace hlavn√≠ho souboru categories.json
        try:
            with open("categories.json", 'r', encoding='utf-8') as f:
                existing_categories = json.load(f)
        except:
            existing_categories = []
        
        # P≈ôid√°n√≠ nov√Ωch kategori√≠
        all_categories = existing_categories + elektro_categories
        
        with open("categories.json", 'w', encoding='utf-8') as f:
            json.dump(all_categories, f, ensure_ascii=False, indent=2)
        
        print(f"‚úÖ Aktualizov√°no categories.json ({len(elektro_categories)} nov√Ωch kategori√≠)")
        
        # Aktualizace hlavn√≠ho souboru se v≈°emi ot√°zkami
        try:
            with open("questions_all.json", 'r', encoding='utf-8') as f:
                existing_questions = json.load(f)
        except:
            existing_questions = []
        
        # P≈ôid√°n√≠ elektro ot√°zek s unik√°tn√≠mi ID
        for question in all_elektro_questions:
            question["id"] = f"{question['category']}_{question['id']}"
        
        all_questions = existing_questions + all_elektro_questions
        
        with open("questions_all.json", 'w', encoding='utf-8') as f:
            json.dump(all_questions, f, ensure_ascii=False, indent=2)
        
        print(f"‚úÖ Aktualizov√°no questions_all.json (celkem {len(all_questions)} ot√°zek)")
    
    print("\nüéâ P≈ôevod dokonƒçen!")

if __name__ == "__main__":
    convert_elektro_questions()